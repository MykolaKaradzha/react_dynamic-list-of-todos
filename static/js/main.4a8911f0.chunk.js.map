{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","selectedTodoId","showTodo","selectTodoHandler","todo","className","map","id","completed","classNames","title","type","onClick","TodoFilter","getFilter","selectedFilter","searchBarValue","getSearchBarValue","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","closeModal","selectedTodo","useState","currentUser","setCurrentUser","useEffect","userId","user","href","email","name","App","setTodos","setSelectedTodo","setSelectedFilter","setSearchBarValue","data","useCallback","filter","filterTodos","option","searchValue","filteredTodos","includes","useMemo","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a8911f0.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId?: number;\n  showTodo: (todo: Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = React.memo((\n  { todos, selectedTodoId, showTodo },\n) => {\n  const selectTodoHandler = (todo: Todo) => () => {\n    showTodo(todo);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <th />\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n            {\n              todo.completed\n                ? (\n                  <td className=\"is-vcentered\">\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  </td>\n                )\n                : <td className=\"is-vcentered\" />\n            }\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={selectTodoHandler(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': todo.id !== selectedTodoId,\n                    'fa-eye-slash': todo.id === selectedTodoId,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import React from 'react';\n\ntype Props = {\n  selectedFilter: string;\n  searchBarValue: string;\n  getFilter: (filter: string) => void;\n  getSearchBarValue: (value: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo((\n  {\n    getFilter,\n    selectedFilter,\n    searchBarValue,\n    getSearchBarValue,\n  },\n) => {\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    getFilter(event.target.value);\n  };\n\n  const handleSearchBar = (event: React.ChangeEvent<HTMLInputElement>) => {\n    getSearchBarValue(event.target.value);\n  };\n\n  const clearSearchBar = () => {\n    getSearchBarValue('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedFilter}\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchBarValue}\n          onChange={handleSearchBar}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {!!searchBarValue && (\n            /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearSearchBar}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Props = {\n  closeModal: () => void;\n  selectedTodo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = (\n  { closeModal, selectedTodo },\n) => {\n  const [currentUser, setCurrentUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(selectedTodo.userId).then(user => setCurrentUser(user));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!currentUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {\n                selectedTodo.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>\n              }\n\n              {' by '}\n\n              <a href={currentUser.email}>\n                {currentUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [searchBarValue, setSearchBarValue] = useState('');\n\n  useEffect(() => {\n    getTodos().then(data => setTodos(data));\n  }, []);\n\n  const showTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const closeModal = () => {\n    setSelectedTodo(null);\n  };\n\n  const getFilter = useCallback(\n    (filter: string) => setSelectedFilter(filter), [],\n  );\n\n  const filterTodos = useCallback((option: string, searchValue?: string) => {\n    let filteredTodos = [...todos];\n\n    if (searchValue) {\n      filteredTodos = filteredTodos.filter(todo => todo.title.includes(searchValue));\n    }\n\n    switch (option) {\n      case 'completed':\n\n        return filteredTodos.filter(todo => todo.completed);\n\n      case 'active':\n        return filteredTodos.filter(todo => !todo.completed);\n\n      default:\n        return filteredTodos;\n    }\n  }, [todos]);\n\n  const filteredTodos = useMemo(() => (\n    filterTodos(selectedFilter, searchBarValue)), [\n    todos, selectedFilter, searchBarValue, filterTodos]);\n\n  const getSearchBarValue = useCallback(\n    (value: string) => setSearchBarValue(value), [],\n  );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                getFilter={getFilter}\n                selectedFilter={selectedFilter}\n                searchBarValue={searchBarValue}\n                getSearchBarValue={getSearchBarValue}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length && <Loader />}\n              <TodoList\n                todos={filteredTodos}\n                selectedTodoId={selectedTodo?.id}\n                showTodo={showTodo}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          closeModal={closeModal}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}